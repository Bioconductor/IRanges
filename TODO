- Move the "reverse" and "coverage" generics and methods for IRanges objects
  from the Biostrings package to this package.

- Data structures:
  - Ranges, abstract parent of all range structures
  - IndexedRanges, extend Ranges, adds index slot
  - AnnotatedRanges, composed of Ranges and a place to store data on the ranges
    - environment of vectors on ranges, each vector has "gap value"
    - extends Ranges
  - DBRanges for representing Ranges in a database
  - RangesCollection as collection of Ranges objects, extends Ranges?
  - RangesMatching, encodes matching between ranges,
    - Extends RangesCollection and maybe graph?
  - RectRanges, RangesCollection of two Ranges, one for each dimension
  - PolyRanges, list of real-valued matrices, each holding one polygon?

- Ranges methods:
  - "append" or "c" for concatenation
  - "unique" for removing duplicate ranges
  - "findInterval" for points that fall into a normal Ranges
  - "overlap" for finding regions that overlap
  - "nearest" for finding nearest neighbors
  - "match" and "%in%" for exact matching
  - "intersect" or "&" for finding the completely overlapping subregions
  - "setdiff" or "-" for subtracting the overlap from first argument
  - "!" as alias for "gaps"
  - "merge" or "|" for merging, i.e. reduce(c(x, y))
  - "split" and "unsplit" for working with categories/clusters
    - operate on RangesCollection objects, not lists
  - "unroll" like "inverse.rle", generates vector from values on ranges
    - if no value specified, could be logical vector, TRUE in range else FALSE
  - "sort" sorts by start or end and returns result as TreeRanges
  - "[[" for getting out a named data object
  - "[x,y" where 'x' indexes the ranges and 'y' indexes the data objects 
  
- RangesCollection methods:
  - "c"/"append", "split", "unsplit", "unlist", ...
  - binary ops: "overlap", "nearest", "intersect", "setdiff", "merge"
    - 'y' omitted: become n-ary ops on items in collection
    - 'y' specified: performed element-wise
  - unary ops: "gaps" are vectorized
  - "rangeApply" for applying over each element
  
- RangeMatching methods:
  - "lmatched" and "rmatched", which matched (either side)
  - "as.matrix", perhaps delegates to "edgeMatrix" to extract matches
  - "clusters", perhaps delegates to "connComp" to group matched ranges
  - "relations" to extract relationships in terms of Allen's Interval Algebra
    - kind of like "all.equal"
  - "width" for amount of overlap for each match
    
- IRanges constructors:
  - From 'rle' object